Terminals unused in grammar

   ASSIGN
   IFTHEN
   NEWLINE
   FUNC


Grammar

    0 $accept: Prog $end

    1 Prog: GDefblock FdefList Mainblock

    2 GDefblock: DECL GDefList ENDDECL

    3 GDefList: GDecl GDefList
    4         | GDecl

    5 GDecl: Type GIdList ';'

    6 Type: INT
    7     | BOOL

    8 GIdList: GId ',' GIdList
    9        | GId

   10 GId: ID
   11    | ID '[' NUM ']'
   12    | ID '(' ArgList ')'

   13 ArgList: Type ID ',' ArgList
   14        | Type ID
   15        | %empty

   16 ArgFuncList: Type ID ',' ArgFuncList
   17            | Type ID
   18            | %empty

   19 FdefList: %empty
   20         | FdefList Fdef

   21 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock Body '}'

   22 LDefblock: DECL LDefList ENDDECL

   23 LDefList: LDecl LDefList
   24         | %empty

   25 LDecl: Type LIdList ';'

   26 LIdList: LId ',' LIdList
   27        | LId

   28 LId: ID

   29 Mainblock: INT MAIN '(' ')' '{' LDefblock Body '}'

   30 Body: BEGINM slist RetStmt END

   31 slist: slist stmt
   32      | stmt

   33 stmt: idexpr ASGN expr ';'
   34     | READ '(' idexpr ')' ';'
   35     | WRITE '(' expr ')' ';'
   36     | IF '(' expr ')' THEN slist ENDIF ';'
   37     | IF '(' expr ')' THEN slist ELSE slist ENDIF ';'
   38     | WHILE '(' expr ')' DO slist ENDWHILE ';'

   39 expr: expr PLUS expr
   40     | expr MINUS expr
   41     | expr MUL expr
   42     | expr DIV expr
   43     | expr MODULO expr
   44     | expr EQ expr
   45     | expr LT expr
   46     | expr GT expr
   47     | expr LE expr
   48     | expr GE expr
   49     | expr NE expr
   50     | expr AND expr
   51     | expr OR expr
   52     | NOT expr
   53     | idexpr
   54     | NUM
   55     | BOOLCONS

   56 idexpr: ID '[' expr ']'
   57       | ID
   58       | ID '(' ExprList ')'

   59 ExprList: expr ',' ExprList
   60         | expr
   61         | %empty

   62 RetStmt: RET expr ';'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 12 21 29 34 35 36 37 38 58
')' (41) 12 21 29 34 35 36 37 38 58
',' (44) 8 13 16 26 59
';' (59) 5 25 33 34 35 36 37 38 62
'[' (91) 11 56
']' (93) 11 56
'{' (123) 21 29
'}' (125) 21 29
error (256)
PLUS (258) 39
MINUS (259) 40
MUL (260) 41
DIV (261) 42
MODULO (262) 43
ASSIGN (263)
LT (264) 45
LE (265) 47
GT (266) 46
GE (267) 48
EQ (268) 44
NE (269) 49
AND (270) 50
OR (271) 51
NOT (272) 52
IF (273) 36 37
THEN (274) 36 37
ELSE (275) 37
ENDIF (276) 36 37
WHILE (277) 38
DO (278) 38
ENDWHILE (279) 38
IFTHEN (280)
ID (281) 10 11 12 13 14 16 17 21 28 56 57 58
NUM (282) 11 54
BOOLCONS (283) 55
READ (284) 34
WRITE (285) 35
ASGN (286) 33
NEWLINE (287)
BEGINM (288) 30
END (289) 30
INT (290) 6 29
BOOL (291) 7
DECL (292) 2 22
ENDDECL (293) 2 22
MAIN (294) 29
RET (295) 62
FUNC (296)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
Prog (51)
    on left: 1, on right: 0
GDefblock (52)
    on left: 2, on right: 1
GDefList (53)
    on left: 3 4, on right: 2 3
GDecl (54)
    on left: 5, on right: 3 4
Type (55)
    on left: 6 7, on right: 5 13 14 16 17 21 25
GIdList (56)
    on left: 8 9, on right: 5 8
GId (57)
    on left: 10 11 12, on right: 8 9
ArgList (58)
    on left: 13 14 15, on right: 12 13
ArgFuncList (59)
    on left: 16 17 18, on right: 16 21
FdefList (60)
    on left: 19 20, on right: 1 20
Fdef (61)
    on left: 21, on right: 20
LDefblock (62)
    on left: 22, on right: 21 29
LDefList (63)
    on left: 23 24, on right: 22 23
LDecl (64)
    on left: 25, on right: 23
LIdList (65)
    on left: 26 27, on right: 25 26
LId (66)
    on left: 28, on right: 26 27
Mainblock (67)
    on left: 29, on right: 1
Body (68)
    on left: 30, on right: 21 29
slist (69)
    on left: 31 32, on right: 30 31 36 37 38
stmt (70)
    on left: 33 34 35 36 37 38, on right: 31 32
expr (71)
    on left: 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55, on right:
    33 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 56 59
    60 62
idexpr (72)
    on left: 56 57 58, on right: 33 34 53
ExprList (73)
    on left: 59 60 61, on right: 58 59
RetStmt (74)
    on left: 62, on right: 30


State 0

    0 $accept: . Prog $end

    DECL  shift, and go to state 1

    Prog       go to state 2
    GDefblock  go to state 3


State 1

    2 GDefblock: DECL . GDefList ENDDECL

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    GDefList  go to state 6
    GDecl     go to state 7
    Type      go to state 8


State 2

    0 $accept: Prog . $end

    $end  shift, and go to state 9


State 3

    1 Prog: GDefblock . FdefList Mainblock

    $default  reduce using rule 19 (FdefList)

    FdefList  go to state 10


State 4

    6 Type: INT .

    $default  reduce using rule 6 (Type)


State 5

    7 Type: BOOL .

    $default  reduce using rule 7 (Type)


State 6

    2 GDefblock: DECL GDefList . ENDDECL

    ENDDECL  shift, and go to state 11


State 7

    3 GDefList: GDecl . GDefList
    4         | GDecl .

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 4 (GDefList)

    GDefList  go to state 12
    GDecl     go to state 7
    Type      go to state 8


State 8

    5 GDecl: Type . GIdList ';'

    ID  shift, and go to state 13

    GIdList  go to state 14
    GId      go to state 15


State 9

    0 $accept: Prog $end .

    $default  accept


State 10

    1 Prog: GDefblock FdefList . Mainblock
   20 FdefList: FdefList . Fdef

    INT   shift, and go to state 16
    BOOL  shift, and go to state 5

    Type       go to state 17
    Fdef       go to state 18
    Mainblock  go to state 19


State 11

    2 GDefblock: DECL GDefList ENDDECL .

    $default  reduce using rule 2 (GDefblock)


State 12

    3 GDefList: GDecl GDefList .

    $default  reduce using rule 3 (GDefList)


State 13

   10 GId: ID .
   11    | ID . '[' NUM ']'
   12    | ID . '(' ArgList ')'

    '['  shift, and go to state 20
    '('  shift, and go to state 21

    $default  reduce using rule 10 (GId)


State 14

    5 GDecl: Type GIdList . ';'

    ';'  shift, and go to state 22


State 15

    8 GIdList: GId . ',' GIdList
    9        | GId .

    ','  shift, and go to state 23

    $default  reduce using rule 9 (GIdList)


State 16

    6 Type: INT .
   29 Mainblock: INT . MAIN '(' ')' '{' LDefblock Body '}'

    MAIN  shift, and go to state 24

    $default  reduce using rule 6 (Type)


State 17

   21 Fdef: Type . ID '(' ArgFuncList ')' '{' LDefblock Body '}'

    ID  shift, and go to state 25


State 18

   20 FdefList: FdefList Fdef .

    $default  reduce using rule 20 (FdefList)


State 19

    1 Prog: GDefblock FdefList Mainblock .

    $default  reduce using rule 1 (Prog)


State 20

   11 GId: ID '[' . NUM ']'

    NUM  shift, and go to state 26


State 21

   12 GId: ID '(' . ArgList ')'

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 15 (ArgList)

    Type     go to state 27
    ArgList  go to state 28


State 22

    5 GDecl: Type GIdList ';' .

    $default  reduce using rule 5 (GDecl)


State 23

    8 GIdList: GId ',' . GIdList

    ID  shift, and go to state 13

    GIdList  go to state 29
    GId      go to state 15


State 24

   29 Mainblock: INT MAIN . '(' ')' '{' LDefblock Body '}'

    '('  shift, and go to state 30


State 25

   21 Fdef: Type ID . '(' ArgFuncList ')' '{' LDefblock Body '}'

    '('  shift, and go to state 31


State 26

   11 GId: ID '[' NUM . ']'

    ']'  shift, and go to state 32


State 27

   13 ArgList: Type . ID ',' ArgList
   14        | Type . ID

    ID  shift, and go to state 33


State 28

   12 GId: ID '(' ArgList . ')'

    ')'  shift, and go to state 34


State 29

    8 GIdList: GId ',' GIdList .

    $default  reduce using rule 8 (GIdList)


State 30

   29 Mainblock: INT MAIN '(' . ')' '{' LDefblock Body '}'

    ')'  shift, and go to state 35


State 31

   21 Fdef: Type ID '(' . ArgFuncList ')' '{' LDefblock Body '}'

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 18 (ArgFuncList)

    Type         go to state 36
    ArgFuncList  go to state 37


State 32

   11 GId: ID '[' NUM ']' .

    $default  reduce using rule 11 (GId)


State 33

   13 ArgList: Type ID . ',' ArgList
   14        | Type ID .

    ','  shift, and go to state 38

    $default  reduce using rule 14 (ArgList)


State 34

   12 GId: ID '(' ArgList ')' .

    $default  reduce using rule 12 (GId)


State 35

   29 Mainblock: INT MAIN '(' ')' . '{' LDefblock Body '}'

    '{'  shift, and go to state 39


State 36

   16 ArgFuncList: Type . ID ',' ArgFuncList
   17            | Type . ID

    ID  shift, and go to state 40


State 37

   21 Fdef: Type ID '(' ArgFuncList . ')' '{' LDefblock Body '}'

    ')'  shift, and go to state 41


State 38

   13 ArgList: Type ID ',' . ArgList

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 15 (ArgList)

    Type     go to state 27
    ArgList  go to state 42


State 39

   29 Mainblock: INT MAIN '(' ')' '{' . LDefblock Body '}'

    DECL  shift, and go to state 43

    LDefblock  go to state 44


State 40

   16 ArgFuncList: Type ID . ',' ArgFuncList
   17            | Type ID .

    ','  shift, and go to state 45

    $default  reduce using rule 17 (ArgFuncList)


State 41

   21 Fdef: Type ID '(' ArgFuncList ')' . '{' LDefblock Body '}'

    '{'  shift, and go to state 46


State 42

   13 ArgList: Type ID ',' ArgList .

    $default  reduce using rule 13 (ArgList)


State 43

   22 LDefblock: DECL . LDefList ENDDECL

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 24 (LDefList)

    Type      go to state 47
    LDefList  go to state 48
    LDecl     go to state 49


State 44

   29 Mainblock: INT MAIN '(' ')' '{' LDefblock . Body '}'

    BEGINM  shift, and go to state 50

    Body  go to state 51


State 45

   16 ArgFuncList: Type ID ',' . ArgFuncList

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 18 (ArgFuncList)

    Type         go to state 36
    ArgFuncList  go to state 52


State 46

   21 Fdef: Type ID '(' ArgFuncList ')' '{' . LDefblock Body '}'

    DECL  shift, and go to state 43

    LDefblock  go to state 53


State 47

   25 LDecl: Type . LIdList ';'

    ID  shift, and go to state 54

    LIdList  go to state 55
    LId      go to state 56


State 48

   22 LDefblock: DECL LDefList . ENDDECL

    ENDDECL  shift, and go to state 57


State 49

   23 LDefList: LDecl . LDefList

    INT   shift, and go to state 4
    BOOL  shift, and go to state 5

    $default  reduce using rule 24 (LDefList)

    Type      go to state 47
    LDefList  go to state 58
    LDecl     go to state 49


State 50

   30 Body: BEGINM . slist RetStmt END

    IF     shift, and go to state 59
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63

    slist   go to state 64
    stmt    go to state 65
    idexpr  go to state 66


State 51

   29 Mainblock: INT MAIN '(' ')' '{' LDefblock Body . '}'

    '}'  shift, and go to state 67


State 52

   16 ArgFuncList: Type ID ',' ArgFuncList .

    $default  reduce using rule 16 (ArgFuncList)


State 53

   21 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock . Body '}'

    BEGINM  shift, and go to state 50

    Body  go to state 68


State 54

   28 LId: ID .

    $default  reduce using rule 28 (LId)


State 55

   25 LDecl: Type LIdList . ';'

    ';'  shift, and go to state 69


State 56

   26 LIdList: LId . ',' LIdList
   27        | LId .

    ','  shift, and go to state 70

    $default  reduce using rule 27 (LIdList)


State 57

   22 LDefblock: DECL LDefList ENDDECL .

    $default  reduce using rule 22 (LDefblock)


State 58

   23 LDefList: LDecl LDefList .

    $default  reduce using rule 23 (LDefList)


State 59

   36 stmt: IF . '(' expr ')' THEN slist ENDIF ';'
   37     | IF . '(' expr ')' THEN slist ELSE slist ENDIF ';'

    '('  shift, and go to state 71


State 60

   38 stmt: WHILE . '(' expr ')' DO slist ENDWHILE ';'

    '('  shift, and go to state 72


State 61

   56 idexpr: ID . '[' expr ']'
   57       | ID .
   58       | ID . '(' ExprList ')'

    '['  shift, and go to state 73
    '('  shift, and go to state 74

    $default  reduce using rule 57 (idexpr)


State 62

   34 stmt: READ . '(' idexpr ')' ';'

    '('  shift, and go to state 75


State 63

   35 stmt: WRITE . '(' expr ')' ';'

    '('  shift, and go to state 76


State 64

   30 Body: BEGINM slist . RetStmt END
   31 slist: slist . stmt

    IF     shift, and go to state 59
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63
    RET    shift, and go to state 77

    stmt     go to state 78
    idexpr   go to state 66
    RetStmt  go to state 79


State 65

   32 slist: stmt .

    $default  reduce using rule 32 (slist)


State 66

   33 stmt: idexpr . ASGN expr ';'

    ASGN  shift, and go to state 80


State 67

   29 Mainblock: INT MAIN '(' ')' '{' LDefblock Body '}' .

    $default  reduce using rule 29 (Mainblock)


State 68

   21 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock Body . '}'

    '}'  shift, and go to state 81


State 69

   25 LDecl: Type LIdList ';' .

    $default  reduce using rule 25 (LDecl)


State 70

   26 LIdList: LId ',' . LIdList

    ID  shift, and go to state 54

    LIdList  go to state 82
    LId      go to state 56


State 71

   36 stmt: IF '(' . expr ')' THEN slist ENDIF ';'
   37     | IF '(' . expr ')' THEN slist ELSE slist ENDIF ';'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 86
    idexpr  go to state 87


State 72

   38 stmt: WHILE '(' . expr ')' DO slist ENDWHILE ';'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 88
    idexpr  go to state 87


State 73

   56 idexpr: ID '[' . expr ']'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 89
    idexpr  go to state 87


State 74

   58 idexpr: ID '(' . ExprList ')'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    $default  reduce using rule 61 (ExprList)

    expr      go to state 90
    idexpr    go to state 87
    ExprList  go to state 91


State 75

   34 stmt: READ '(' . idexpr ')' ';'

    ID  shift, and go to state 61

    idexpr  go to state 92


State 76

   35 stmt: WRITE '(' . expr ')' ';'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 93
    idexpr  go to state 87


State 77

   62 RetStmt: RET . expr ';'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 94
    idexpr  go to state 87


State 78

   31 slist: slist stmt .

    $default  reduce using rule 31 (slist)


State 79

   30 Body: BEGINM slist RetStmt . END

    END  shift, and go to state 95


State 80

   33 stmt: idexpr ASGN . expr ';'

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 96
    idexpr  go to state 87


State 81

   21 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock Body '}' .

    $default  reduce using rule 21 (Fdef)


State 82

   26 LIdList: LId ',' LIdList .

    $default  reduce using rule 26 (LIdList)


State 83

   52 expr: NOT . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 97
    idexpr  go to state 87


State 84

   54 expr: NUM .

    $default  reduce using rule 54 (expr)


State 85

   55 expr: BOOLCONS .

    $default  reduce using rule 55 (expr)


State 86

   36 stmt: IF '(' expr . ')' THEN slist ENDIF ';'
   37     | IF '(' expr . ')' THEN slist ELSE slist ENDIF ';'
   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ')'     shift, and go to state 111


State 87

   53 expr: idexpr .

    $default  reduce using rule 53 (expr)


State 88

   38 stmt: WHILE '(' expr . ')' DO slist ENDWHILE ';'
   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ')'     shift, and go to state 112


State 89

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   56 idexpr: ID '[' expr . ']'

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ']'     shift, and go to state 113


State 90

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   59 ExprList: expr . ',' ExprList
   60         | expr .

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ','     shift, and go to state 114

    $default  reduce using rule 60 (ExprList)


State 91

   58 idexpr: ID '(' ExprList . ')'

    ')'  shift, and go to state 115


State 92

   34 stmt: READ '(' idexpr . ')' ';'

    ')'  shift, and go to state 116


State 93

   35 stmt: WRITE '(' expr . ')' ';'
   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ')'     shift, and go to state 117


State 94

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   62 RetStmt: RET expr . ';'

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ';'     shift, and go to state 118


State 95

   30 Body: BEGINM slist RetStmt END .

    $default  reduce using rule 30 (Body)


State 96

   33 stmt: idexpr ASGN expr . ';'
   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108
    AND     shift, and go to state 109
    OR      shift, and go to state 110
    ';'     shift, and go to state 119


State 97

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   52     | NOT expr .

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108

    $default  reduce using rule 52 (expr)


State 98

   39 expr: expr PLUS . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 120
    idexpr  go to state 87


State 99

   40 expr: expr MINUS . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 121
    idexpr  go to state 87


State 100

   41 expr: expr MUL . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 122
    idexpr  go to state 87


State 101

   42 expr: expr DIV . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 123
    idexpr  go to state 87


State 102

   43 expr: expr MODULO . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 124
    idexpr  go to state 87


State 103

   45 expr: expr LT . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 125
    idexpr  go to state 87


State 104

   47 expr: expr LE . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 126
    idexpr  go to state 87


State 105

   46 expr: expr GT . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 127
    idexpr  go to state 87


State 106

   48 expr: expr GE . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 128
    idexpr  go to state 87


State 107

   44 expr: expr EQ . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 129
    idexpr  go to state 87


State 108

   49 expr: expr NE . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 130
    idexpr  go to state 87


State 109

   50 expr: expr AND . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 131
    idexpr  go to state 87


State 110

   51 expr: expr OR . expr

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    expr    go to state 132
    idexpr  go to state 87


State 111

   36 stmt: IF '(' expr ')' . THEN slist ENDIF ';'
   37     | IF '(' expr ')' . THEN slist ELSE slist ENDIF ';'

    THEN  shift, and go to state 133


State 112

   38 stmt: WHILE '(' expr ')' . DO slist ENDWHILE ';'

    DO  shift, and go to state 134


State 113

   56 idexpr: ID '[' expr ']' .

    $default  reduce using rule 56 (idexpr)


State 114

   59 ExprList: expr ',' . ExprList

    NOT       shift, and go to state 83
    ID        shift, and go to state 61
    NUM       shift, and go to state 84
    BOOLCONS  shift, and go to state 85

    $default  reduce using rule 61 (ExprList)

    expr      go to state 90
    idexpr    go to state 87
    ExprList  go to state 135


State 115

   58 idexpr: ID '(' ExprList ')' .

    $default  reduce using rule 58 (idexpr)


State 116

   34 stmt: READ '(' idexpr ')' . ';'

    ';'  shift, and go to state 136


State 117

   35 stmt: WRITE '(' expr ')' . ';'

    ';'  shift, and go to state 137


State 118

   62 RetStmt: RET expr ';' .

    $default  reduce using rule 62 (RetStmt)


State 119

   33 stmt: idexpr ASGN expr ';' .

    $default  reduce using rule 33 (stmt)


State 120

   39 expr: expr . PLUS expr
   39     | expr PLUS expr .
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 39 (expr)


State 121

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   40     | expr MINUS expr .
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 40 (expr)


State 122

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   41     | expr MUL expr .
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 41 (expr)


State 123

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   42     | expr DIV expr .
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 42 (expr)


State 124

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   43     | expr MODULO expr .
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    $default  reduce using rule 43 (expr)


State 125

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   45     | expr LT expr .
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 45 (expr)


State 126

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   47     | expr LE expr .
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 47 (expr)


State 127

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   46     | expr GT expr .
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 46 (expr)


State 128

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   48     | expr GE expr .
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 48 (expr)


State 129

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   44     | expr EQ expr .
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 44 (expr)


State 130

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   49     | expr NE expr .
   50     | expr . AND expr
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102

    $default  reduce using rule 49 (expr)


State 131

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   50     | expr AND expr .
   51     | expr . OR expr

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108

    $default  reduce using rule 50 (expr)


State 132

   39 expr: expr . PLUS expr
   40     | expr . MINUS expr
   41     | expr . MUL expr
   42     | expr . DIV expr
   43     | expr . MODULO expr
   44     | expr . EQ expr
   45     | expr . LT expr
   46     | expr . GT expr
   47     | expr . LE expr
   48     | expr . GE expr
   49     | expr . NE expr
   50     | expr . AND expr
   51     | expr . OR expr
   51     | expr OR expr .

    PLUS    shift, and go to state 98
    MINUS   shift, and go to state 99
    MUL     shift, and go to state 100
    DIV     shift, and go to state 101
    MODULO  shift, and go to state 102
    LT      shift, and go to state 103
    LE      shift, and go to state 104
    GT      shift, and go to state 105
    GE      shift, and go to state 106
    EQ      shift, and go to state 107
    NE      shift, and go to state 108

    $default  reduce using rule 51 (expr)


State 133

   36 stmt: IF '(' expr ')' THEN . slist ENDIF ';'
   37     | IF '(' expr ')' THEN . slist ELSE slist ENDIF ';'

    IF     shift, and go to state 59
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63

    slist   go to state 138
    stmt    go to state 65
    idexpr  go to state 66


State 134

   38 stmt: WHILE '(' expr ')' DO . slist ENDWHILE ';'

    IF     shift, and go to state 59
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63

    slist   go to state 139
    stmt    go to state 65
    idexpr  go to state 66


State 135

   59 ExprList: expr ',' ExprList .

    $default  reduce using rule 59 (ExprList)


State 136

   34 stmt: READ '(' idexpr ')' ';' .

    $default  reduce using rule 34 (stmt)


State 137

   35 stmt: WRITE '(' expr ')' ';' .

    $default  reduce using rule 35 (stmt)


State 138

   31 slist: slist . stmt
   36 stmt: IF '(' expr ')' THEN slist . ENDIF ';'
   37     | IF '(' expr ')' THEN slist . ELSE slist ENDIF ';'

    IF     shift, and go to state 59
    ELSE   shift, and go to state 140
    ENDIF  shift, and go to state 141
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63

    stmt    go to state 78
    idexpr  go to state 66


State 139

   31 slist: slist . stmt
   38 stmt: WHILE '(' expr ')' DO slist . ENDWHILE ';'

    IF        shift, and go to state 59
    WHILE     shift, and go to state 60
    ENDWHILE  shift, and go to state 142
    ID        shift, and go to state 61
    READ      shift, and go to state 62
    WRITE     shift, and go to state 63

    stmt    go to state 78
    idexpr  go to state 66


State 140

   37 stmt: IF '(' expr ')' THEN slist ELSE . slist ENDIF ';'

    IF     shift, and go to state 59
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63

    slist   go to state 143
    stmt    go to state 65
    idexpr  go to state 66


State 141

   36 stmt: IF '(' expr ')' THEN slist ENDIF . ';'

    ';'  shift, and go to state 144


State 142

   38 stmt: WHILE '(' expr ')' DO slist ENDWHILE . ';'

    ';'  shift, and go to state 145


State 143

   31 slist: slist . stmt
   37 stmt: IF '(' expr ')' THEN slist ELSE slist . ENDIF ';'

    IF     shift, and go to state 59
    ENDIF  shift, and go to state 146
    WHILE  shift, and go to state 60
    ID     shift, and go to state 61
    READ   shift, and go to state 62
    WRITE  shift, and go to state 63

    stmt    go to state 78
    idexpr  go to state 66


State 144

   36 stmt: IF '(' expr ')' THEN slist ENDIF ';' .

    $default  reduce using rule 36 (stmt)


State 145

   38 stmt: WHILE '(' expr ')' DO slist ENDWHILE ';' .

    $default  reduce using rule 38 (stmt)


State 146

   37 stmt: IF '(' expr ')' THEN slist ELSE slist ENDIF . ';'

    ';'  shift, and go to state 147


State 147

   37 stmt: IF '(' expr ')' THEN slist ELSE slist ENDIF ';' .

    $default  reduce using rule 37 (stmt)
