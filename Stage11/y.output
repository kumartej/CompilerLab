Terminals unused in grammar

   ASSIGN
   IFTHEN
   NEWLINE
   FUNC


Grammar

    0 $accept: Prog $end

    1 Prog: TypeInitBlock TypeDefBlock GDefblock FdefList Mainblock

    2 TypeInitBlock: %empty

    3 TypeDefBlock: TYPE TypeDefList ENDTYPE
    4             | %empty

    5 TypeDefList: TypeDefList TypeDef
    6            | TypeDef

    7 TypeDef: TypeDefHead '{' TypeDefBody '}'

    8 TypeDefHead: ID

    9 TypeDefBody: FieldDeclList

   10 FieldDeclList: FieldDeclList FieldDecl
   11              | FieldDecl

   12 FieldDecl: TypeName ID ';'

   13 TypeName: INT
   14         | BOOL
   15         | ID

   16 GDefblock: DECL GDefList ENDDECL

   17 GDefList: GDecl GDefList
   18         | GDecl

   19 GDecl: Type GIdList ';'

   20 Type: INT
   21     | BOOL
   22     | ID

   23 GIdList: GId ',' GIdList
   24        | GId

   25 GId: ID
   26    | ID '[' NUM ']'
   27    | ID '(' ArgList ')'

   28 ArgList: Type ID ',' ArgList
   29        | Type ID
   30        | %empty

   31 ArgFuncList: Type ID ',' ArgFuncList
   32            | Type ID
   33            | %empty

   34 FdefList: %empty
   35         | FdefList Fdef

   36 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock Body '}'

   37 LDefblock: DECL LDefList ENDDECL

   38 LDefList: LDecl LDefList
   39         | %empty

   40 LDecl: Type LIdList ';'

   41 LIdList: LId ',' LIdList
   42        | LId

   43 LId: ID

   44 Mainblock: INT MAIN '(' ')' '{' LDefblock Body '}'

   45 Body: BEGINM slist RetStmt END

   46 slist: slist stmt
   47      | stmt

   48 stmt: idexpr ASGN expr ';'
   49     | READ '(' idexpr ')' ';'
   50     | WRITE '(' expr ')' ';'
   51     | IF '(' expr ')' THEN slist ENDIF ';'
   52     | IF '(' expr ')' THEN slist ELSE slist ENDIF ';'
   53     | WHILE '(' expr ')' DO slist ENDWHILE ';'
   54     | idexpr ASGN ALLOC '(' ')' ';'
   55     | idexpr ASGN NULLV ';'
   56     | FREE '(' idexpr ')' ';'
   57     | BREAK ';'
   58     | CONTINUE ';'

   59 field: ID '.' ID
   60      | ID '.' field

   61 expr: expr PLUS expr
   62     | expr MINUS expr
   63     | expr MUL expr
   64     | expr DIV expr
   65     | expr MODULO expr
   66     | expr EQ expr
   67     | expr LT expr
   68     | expr GT expr
   69     | expr LE expr
   70     | expr GE expr
   71     | expr NE expr
   72     | expr AND expr
   73     | expr OR expr
   74     | NOT expr
   75     | expr EQ NULLV
   76     | expr NE NULLV
   77     | idexpr
   78     | NUM
   79     | BOOLCONS

   80 idexpr: ID '[' expr ']'
   81       | ID
   82       | ID '(' ExprList ')'
   83       | field

   84 ExprList: expr ',' ExprList
   85         | expr
   86         | %empty

   87 RetStmt: RET expr ';'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 27 36 44 49 50 51 52 53 54 56 82
')' (41) 27 36 44 49 50 51 52 53 54 56 82
',' (44) 23 28 31 41 84
'.' (46) 59 60
';' (59) 12 19 40 48 49 50 51 52 53 54 55 56 57 58 87
'[' (91) 26 80
']' (93) 26 80
'{' (123) 7 36 44
'}' (125) 7 36 44
error (256)
PLUS (258) 61
MINUS (259) 62
MUL (260) 63
DIV (261) 64
MODULO (262) 65
ASSIGN (263)
LT (264) 67
LE (265) 69
GT (266) 68
GE (267) 70
EQ (268) 66 75
NE (269) 71 76
AND (270) 72
OR (271) 73
NOT (272) 74
IF (273) 51 52
THEN (274) 51 52
ELSE (275) 52
ENDIF (276) 51 52
WHILE (277) 53
DO (278) 53
ENDWHILE (279) 53
IFTHEN (280)
ID (281) 8 12 15 22 25 26 27 28 29 31 32 36 43 59 60 80 81 82
NUM (282) 26 78
BOOLCONS (283) 79
READ (284) 49
WRITE (285) 50
ASGN (286) 48 54 55
NEWLINE (287)
BEGINM (288) 45
END (289) 45
INT (290) 13 20 44
BOOL (291) 14 21
DECL (292) 16 37
ENDDECL (293) 16 37
MAIN (294) 44
RET (295) 87
FUNC (296)
TYPE (297) 3
ENDTYPE (298) 3
ALLOC (299) 54
FREE (300) 56
NULLV (301) 55 75 76
BREAK (302) 57
CONTINUE (303) 58


Nonterminals, with rules where they appear

$accept (58)
    on left: 0
Prog (59)
    on left: 1, on right: 0
TypeInitBlock (60)
    on left: 2, on right: 1
TypeDefBlock (61)
    on left: 3 4, on right: 1
TypeDefList (62)
    on left: 5 6, on right: 3 5
TypeDef (63)
    on left: 7, on right: 5 6
TypeDefHead (64)
    on left: 8, on right: 7
TypeDefBody (65)
    on left: 9, on right: 7
FieldDeclList (66)
    on left: 10 11, on right: 9 10
FieldDecl (67)
    on left: 12, on right: 10 11
TypeName (68)
    on left: 13 14 15, on right: 12
GDefblock (69)
    on left: 16, on right: 1
GDefList (70)
    on left: 17 18, on right: 16 17
GDecl (71)
    on left: 19, on right: 17 18
Type (72)
    on left: 20 21 22, on right: 19 28 29 31 32 36 40
GIdList (73)
    on left: 23 24, on right: 19 23
GId (74)
    on left: 25 26 27, on right: 23 24
ArgList (75)
    on left: 28 29 30, on right: 27 28
ArgFuncList (76)
    on left: 31 32 33, on right: 31 36
FdefList (77)
    on left: 34 35, on right: 1 35
Fdef (78)
    on left: 36, on right: 35
LDefblock (79)
    on left: 37, on right: 36 44
LDefList (80)
    on left: 38 39, on right: 37 38
LDecl (81)
    on left: 40, on right: 38
LIdList (82)
    on left: 41 42, on right: 40 41
LId (83)
    on left: 43, on right: 41 42
Mainblock (84)
    on left: 44, on right: 1
Body (85)
    on left: 45, on right: 36 44
slist (86)
    on left: 46 47, on right: 45 46 51 52 53
stmt (87)
    on left: 48 49 50 51 52 53 54 55 56 57 58, on right: 46 47
field (88)
    on left: 59 60, on right: 60 83
expr (89)
    on left: 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
    79, on right: 48 50 51 52 53 61 62 63 64 65 66 67 68 69 70 71 72
    73 74 75 76 80 84 85 87
idexpr (90)
    on left: 80 81 82 83, on right: 48 49 54 55 56 77
ExprList (91)
    on left: 84 85 86, on right: 82 84
RetStmt (92)
    on left: 87, on right: 45


State 0

    0 $accept: . Prog $end

    $default  reduce using rule 2 (TypeInitBlock)

    Prog           go to state 1
    TypeInitBlock  go to state 2


State 1

    0 $accept: Prog . $end

    $end  shift, and go to state 3


State 2

    1 Prog: TypeInitBlock . TypeDefBlock GDefblock FdefList Mainblock

    TYPE  shift, and go to state 4

    $default  reduce using rule 4 (TypeDefBlock)

    TypeDefBlock  go to state 5


State 3

    0 $accept: Prog $end .

    $default  accept


State 4

    3 TypeDefBlock: TYPE . TypeDefList ENDTYPE

    ID  shift, and go to state 6

    TypeDefList  go to state 7
    TypeDef      go to state 8
    TypeDefHead  go to state 9


State 5

    1 Prog: TypeInitBlock TypeDefBlock . GDefblock FdefList Mainblock

    DECL  shift, and go to state 10

    GDefblock  go to state 11


State 6

    8 TypeDefHead: ID .

    $default  reduce using rule 8 (TypeDefHead)


State 7

    3 TypeDefBlock: TYPE TypeDefList . ENDTYPE
    5 TypeDefList: TypeDefList . TypeDef

    ID       shift, and go to state 6
    ENDTYPE  shift, and go to state 12

    TypeDef      go to state 13
    TypeDefHead  go to state 9


State 8

    6 TypeDefList: TypeDef .

    $default  reduce using rule 6 (TypeDefList)


State 9

    7 TypeDef: TypeDefHead . '{' TypeDefBody '}'

    '{'  shift, and go to state 14


State 10

   16 GDefblock: DECL . GDefList ENDDECL

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    GDefList  go to state 18
    GDecl     go to state 19
    Type      go to state 20


State 11

    1 Prog: TypeInitBlock TypeDefBlock GDefblock . FdefList Mainblock

    $default  reduce using rule 34 (FdefList)

    FdefList  go to state 21


State 12

    3 TypeDefBlock: TYPE TypeDefList ENDTYPE .

    $default  reduce using rule 3 (TypeDefBlock)


State 13

    5 TypeDefList: TypeDefList TypeDef .

    $default  reduce using rule 5 (TypeDefList)


State 14

    7 TypeDef: TypeDefHead '{' . TypeDefBody '}'

    ID    shift, and go to state 22
    INT   shift, and go to state 23
    BOOL  shift, and go to state 24

    TypeDefBody    go to state 25
    FieldDeclList  go to state 26
    FieldDecl      go to state 27
    TypeName       go to state 28


State 15

   22 Type: ID .

    $default  reduce using rule 22 (Type)


State 16

   20 Type: INT .

    $default  reduce using rule 20 (Type)


State 17

   21 Type: BOOL .

    $default  reduce using rule 21 (Type)


State 18

   16 GDefblock: DECL GDefList . ENDDECL

    ENDDECL  shift, and go to state 29


State 19

   17 GDefList: GDecl . GDefList
   18         | GDecl .

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 18 (GDefList)

    GDefList  go to state 30
    GDecl     go to state 19
    Type      go to state 20


State 20

   19 GDecl: Type . GIdList ';'

    ID  shift, and go to state 31

    GIdList  go to state 32
    GId      go to state 33


State 21

    1 Prog: TypeInitBlock TypeDefBlock GDefblock FdefList . Mainblock
   35 FdefList: FdefList . Fdef

    ID    shift, and go to state 15
    INT   shift, and go to state 34
    BOOL  shift, and go to state 17

    Type       go to state 35
    Fdef       go to state 36
    Mainblock  go to state 37


State 22

   15 TypeName: ID .

    $default  reduce using rule 15 (TypeName)


State 23

   13 TypeName: INT .

    $default  reduce using rule 13 (TypeName)


State 24

   14 TypeName: BOOL .

    $default  reduce using rule 14 (TypeName)


State 25

    7 TypeDef: TypeDefHead '{' TypeDefBody . '}'

    '}'  shift, and go to state 38


State 26

    9 TypeDefBody: FieldDeclList .
   10 FieldDeclList: FieldDeclList . FieldDecl

    ID    shift, and go to state 22
    INT   shift, and go to state 23
    BOOL  shift, and go to state 24

    $default  reduce using rule 9 (TypeDefBody)

    FieldDecl  go to state 39
    TypeName   go to state 28


State 27

   11 FieldDeclList: FieldDecl .

    $default  reduce using rule 11 (FieldDeclList)


State 28

   12 FieldDecl: TypeName . ID ';'

    ID  shift, and go to state 40


State 29

   16 GDefblock: DECL GDefList ENDDECL .

    $default  reduce using rule 16 (GDefblock)


State 30

   17 GDefList: GDecl GDefList .

    $default  reduce using rule 17 (GDefList)


State 31

   25 GId: ID .
   26    | ID . '[' NUM ']'
   27    | ID . '(' ArgList ')'

    '['  shift, and go to state 41
    '('  shift, and go to state 42

    $default  reduce using rule 25 (GId)


State 32

   19 GDecl: Type GIdList . ';'

    ';'  shift, and go to state 43


State 33

   23 GIdList: GId . ',' GIdList
   24        | GId .

    ','  shift, and go to state 44

    $default  reduce using rule 24 (GIdList)


State 34

   20 Type: INT .
   44 Mainblock: INT . MAIN '(' ')' '{' LDefblock Body '}'

    MAIN  shift, and go to state 45

    $default  reduce using rule 20 (Type)


State 35

   36 Fdef: Type . ID '(' ArgFuncList ')' '{' LDefblock Body '}'

    ID  shift, and go to state 46


State 36

   35 FdefList: FdefList Fdef .

    $default  reduce using rule 35 (FdefList)


State 37

    1 Prog: TypeInitBlock TypeDefBlock GDefblock FdefList Mainblock .

    $default  reduce using rule 1 (Prog)


State 38

    7 TypeDef: TypeDefHead '{' TypeDefBody '}' .

    $default  reduce using rule 7 (TypeDef)


State 39

   10 FieldDeclList: FieldDeclList FieldDecl .

    $default  reduce using rule 10 (FieldDeclList)


State 40

   12 FieldDecl: TypeName ID . ';'

    ';'  shift, and go to state 47


State 41

   26 GId: ID '[' . NUM ']'

    NUM  shift, and go to state 48


State 42

   27 GId: ID '(' . ArgList ')'

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 30 (ArgList)

    Type     go to state 49
    ArgList  go to state 50


State 43

   19 GDecl: Type GIdList ';' .

    $default  reduce using rule 19 (GDecl)


State 44

   23 GIdList: GId ',' . GIdList

    ID  shift, and go to state 31

    GIdList  go to state 51
    GId      go to state 33


State 45

   44 Mainblock: INT MAIN . '(' ')' '{' LDefblock Body '}'

    '('  shift, and go to state 52


State 46

   36 Fdef: Type ID . '(' ArgFuncList ')' '{' LDefblock Body '}'

    '('  shift, and go to state 53


State 47

   12 FieldDecl: TypeName ID ';' .

    $default  reduce using rule 12 (FieldDecl)


State 48

   26 GId: ID '[' NUM . ']'

    ']'  shift, and go to state 54


State 49

   28 ArgList: Type . ID ',' ArgList
   29        | Type . ID

    ID  shift, and go to state 55


State 50

   27 GId: ID '(' ArgList . ')'

    ')'  shift, and go to state 56


State 51

   23 GIdList: GId ',' GIdList .

    $default  reduce using rule 23 (GIdList)


State 52

   44 Mainblock: INT MAIN '(' . ')' '{' LDefblock Body '}'

    ')'  shift, and go to state 57


State 53

   36 Fdef: Type ID '(' . ArgFuncList ')' '{' LDefblock Body '}'

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 33 (ArgFuncList)

    Type         go to state 58
    ArgFuncList  go to state 59


State 54

   26 GId: ID '[' NUM ']' .

    $default  reduce using rule 26 (GId)


State 55

   28 ArgList: Type ID . ',' ArgList
   29        | Type ID .

    ','  shift, and go to state 60

    $default  reduce using rule 29 (ArgList)


State 56

   27 GId: ID '(' ArgList ')' .

    $default  reduce using rule 27 (GId)


State 57

   44 Mainblock: INT MAIN '(' ')' . '{' LDefblock Body '}'

    '{'  shift, and go to state 61


State 58

   31 ArgFuncList: Type . ID ',' ArgFuncList
   32            | Type . ID

    ID  shift, and go to state 62


State 59

   36 Fdef: Type ID '(' ArgFuncList . ')' '{' LDefblock Body '}'

    ')'  shift, and go to state 63


State 60

   28 ArgList: Type ID ',' . ArgList

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 30 (ArgList)

    Type     go to state 49
    ArgList  go to state 64


State 61

   44 Mainblock: INT MAIN '(' ')' '{' . LDefblock Body '}'

    DECL  shift, and go to state 65

    LDefblock  go to state 66


State 62

   31 ArgFuncList: Type ID . ',' ArgFuncList
   32            | Type ID .

    ','  shift, and go to state 67

    $default  reduce using rule 32 (ArgFuncList)


State 63

   36 Fdef: Type ID '(' ArgFuncList ')' . '{' LDefblock Body '}'

    '{'  shift, and go to state 68


State 64

   28 ArgList: Type ID ',' ArgList .

    $default  reduce using rule 28 (ArgList)


State 65

   37 LDefblock: DECL . LDefList ENDDECL

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 39 (LDefList)

    Type      go to state 69
    LDefList  go to state 70
    LDecl     go to state 71


State 66

   44 Mainblock: INT MAIN '(' ')' '{' LDefblock . Body '}'

    BEGINM  shift, and go to state 72

    Body  go to state 73


State 67

   31 ArgFuncList: Type ID ',' . ArgFuncList

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 33 (ArgFuncList)

    Type         go to state 58
    ArgFuncList  go to state 74


State 68

   36 Fdef: Type ID '(' ArgFuncList ')' '{' . LDefblock Body '}'

    DECL  shift, and go to state 65

    LDefblock  go to state 75


State 69

   40 LDecl: Type . LIdList ';'

    ID  shift, and go to state 76

    LIdList  go to state 77
    LId      go to state 78


State 70

   37 LDefblock: DECL LDefList . ENDDECL

    ENDDECL  shift, and go to state 79


State 71

   38 LDefList: LDecl . LDefList

    ID    shift, and go to state 15
    INT   shift, and go to state 16
    BOOL  shift, and go to state 17

    $default  reduce using rule 39 (LDefList)

    Type      go to state 69
    LDefList  go to state 80
    LDecl     go to state 71


State 72

   45 Body: BEGINM . slist RetStmt END

    IF        shift, and go to state 81
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    slist   go to state 89
    stmt    go to state 90
    field   go to state 91
    idexpr  go to state 92


State 73

   44 Mainblock: INT MAIN '(' ')' '{' LDefblock Body . '}'

    '}'  shift, and go to state 93


State 74

   31 ArgFuncList: Type ID ',' ArgFuncList .

    $default  reduce using rule 31 (ArgFuncList)


State 75

   36 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock . Body '}'

    BEGINM  shift, and go to state 72

    Body  go to state 94


State 76

   43 LId: ID .

    $default  reduce using rule 43 (LId)


State 77

   40 LDecl: Type LIdList . ';'

    ';'  shift, and go to state 95


State 78

   41 LIdList: LId . ',' LIdList
   42        | LId .

    ','  shift, and go to state 96

    $default  reduce using rule 42 (LIdList)


State 79

   37 LDefblock: DECL LDefList ENDDECL .

    $default  reduce using rule 37 (LDefblock)


State 80

   38 LDefList: LDecl LDefList .

    $default  reduce using rule 38 (LDefList)


State 81

   51 stmt: IF . '(' expr ')' THEN slist ENDIF ';'
   52     | IF . '(' expr ')' THEN slist ELSE slist ENDIF ';'

    '('  shift, and go to state 97


State 82

   53 stmt: WHILE . '(' expr ')' DO slist ENDWHILE ';'

    '('  shift, and go to state 98


State 83

   59 field: ID . '.' ID
   60      | ID . '.' field
   80 idexpr: ID . '[' expr ']'
   81       | ID .
   82       | ID . '(' ExprList ')'

    '['  shift, and go to state 99
    '('  shift, and go to state 100
    '.'  shift, and go to state 101

    $default  reduce using rule 81 (idexpr)


State 84

   49 stmt: READ . '(' idexpr ')' ';'

    '('  shift, and go to state 102


State 85

   50 stmt: WRITE . '(' expr ')' ';'

    '('  shift, and go to state 103


State 86

   56 stmt: FREE . '(' idexpr ')' ';'

    '('  shift, and go to state 104


State 87

   57 stmt: BREAK . ';'

    ';'  shift, and go to state 105


State 88

   58 stmt: CONTINUE . ';'

    ';'  shift, and go to state 106


State 89

   45 Body: BEGINM slist . RetStmt END
   46 slist: slist . stmt

    IF        shift, and go to state 81
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    RET       shift, and go to state 107
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    stmt     go to state 108
    field    go to state 91
    idexpr   go to state 92
    RetStmt  go to state 109


State 90

   47 slist: stmt .

    $default  reduce using rule 47 (slist)


State 91

   83 idexpr: field .

    $default  reduce using rule 83 (idexpr)


State 92

   48 stmt: idexpr . ASGN expr ';'
   54     | idexpr . ASGN ALLOC '(' ')' ';'
   55     | idexpr . ASGN NULLV ';'

    ASGN  shift, and go to state 110


State 93

   44 Mainblock: INT MAIN '(' ')' '{' LDefblock Body '}' .

    $default  reduce using rule 44 (Mainblock)


State 94

   36 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock Body . '}'

    '}'  shift, and go to state 111


State 95

   40 LDecl: Type LIdList ';' .

    $default  reduce using rule 40 (LDecl)


State 96

   41 LIdList: LId ',' . LIdList

    ID  shift, and go to state 76

    LIdList  go to state 112
    LId      go to state 78


State 97

   51 stmt: IF '(' . expr ')' THEN slist ENDIF ';'
   52     | IF '(' . expr ')' THEN slist ELSE slist ENDIF ';'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 116
    idexpr  go to state 117


State 98

   53 stmt: WHILE '(' . expr ')' DO slist ENDWHILE ';'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 118
    idexpr  go to state 117


State 99

   80 idexpr: ID '[' . expr ']'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 119
    idexpr  go to state 117


State 100

   82 idexpr: ID '(' . ExprList ')'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    $default  reduce using rule 86 (ExprList)

    field     go to state 91
    expr      go to state 120
    idexpr    go to state 117
    ExprList  go to state 121


State 101

   59 field: ID '.' . ID
   60      | ID '.' . field

    ID  shift, and go to state 122

    field  go to state 123


State 102

   49 stmt: READ '(' . idexpr ')' ';'

    ID  shift, and go to state 83

    field   go to state 91
    idexpr  go to state 124


State 103

   50 stmt: WRITE '(' . expr ')' ';'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 125
    idexpr  go to state 117


State 104

   56 stmt: FREE '(' . idexpr ')' ';'

    ID  shift, and go to state 83

    field   go to state 91
    idexpr  go to state 126


State 105

   57 stmt: BREAK ';' .

    $default  reduce using rule 57 (stmt)


State 106

   58 stmt: CONTINUE ';' .

    $default  reduce using rule 58 (stmt)


State 107

   87 RetStmt: RET . expr ';'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 127
    idexpr  go to state 117


State 108

   46 slist: slist stmt .

    $default  reduce using rule 46 (slist)


State 109

   45 Body: BEGINM slist RetStmt . END

    END  shift, and go to state 128


State 110

   48 stmt: idexpr ASGN . expr ';'
   54     | idexpr ASGN . ALLOC '(' ')' ';'
   55     | idexpr ASGN . NULLV ';'

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115
    ALLOC     shift, and go to state 129
    NULLV     shift, and go to state 130

    field   go to state 91
    expr    go to state 131
    idexpr  go to state 117


State 111

   36 Fdef: Type ID '(' ArgFuncList ')' '{' LDefblock Body '}' .

    $default  reduce using rule 36 (Fdef)


State 112

   41 LIdList: LId ',' LIdList .

    $default  reduce using rule 41 (LIdList)


State 113

   74 expr: NOT . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 132
    idexpr  go to state 117


State 114

   78 expr: NUM .

    $default  reduce using rule 78 (expr)


State 115

   79 expr: BOOLCONS .

    $default  reduce using rule 79 (expr)


State 116

   51 stmt: IF '(' expr . ')' THEN slist ENDIF ';'
   52     | IF '(' expr . ')' THEN slist ELSE slist ENDIF ';'
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ')'     shift, and go to state 146


State 117

   77 expr: idexpr .

    $default  reduce using rule 77 (expr)


State 118

   53 stmt: WHILE '(' expr . ')' DO slist ENDWHILE ';'
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ')'     shift, and go to state 147


State 119

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV
   80 idexpr: ID '[' expr . ']'

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ']'     shift, and go to state 148


State 120

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV
   84 ExprList: expr . ',' ExprList
   85         | expr .

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ','     shift, and go to state 149

    $default  reduce using rule 85 (ExprList)


State 121

   82 idexpr: ID '(' ExprList . ')'

    ')'  shift, and go to state 150


State 122

   59 field: ID . '.' ID
   59      | ID '.' ID .
   60      | ID . '.' field

    '.'  shift, and go to state 101

    $default  reduce using rule 59 (field)


State 123

   60 field: ID '.' field .

    $default  reduce using rule 60 (field)


State 124

   49 stmt: READ '(' idexpr . ')' ';'

    ')'  shift, and go to state 151


State 125

   50 stmt: WRITE '(' expr . ')' ';'
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ')'     shift, and go to state 152


State 126

   56 stmt: FREE '(' idexpr . ')' ';'

    ')'  shift, and go to state 153


State 127

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV
   87 RetStmt: RET expr . ';'

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ';'     shift, and go to state 154


State 128

   45 Body: BEGINM slist RetStmt END .

    $default  reduce using rule 45 (Body)


State 129

   54 stmt: idexpr ASGN ALLOC . '(' ')' ';'

    '('  shift, and go to state 155


State 130

   55 stmt: idexpr ASGN NULLV . ';'

    ';'  shift, and go to state 156


State 131

   48 stmt: idexpr ASGN expr . ';'
   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143
    AND     shift, and go to state 144
    OR      shift, and go to state 145
    ';'     shift, and go to state 157


State 132

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   74     | NOT expr .
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143

    $default  reduce using rule 74 (expr)


State 133

   61 expr: expr PLUS . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 158
    idexpr  go to state 117


State 134

   62 expr: expr MINUS . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 159
    idexpr  go to state 117


State 135

   63 expr: expr MUL . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 160
    idexpr  go to state 117


State 136

   64 expr: expr DIV . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 161
    idexpr  go to state 117


State 137

   65 expr: expr MODULO . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 162
    idexpr  go to state 117


State 138

   67 expr: expr LT . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 163
    idexpr  go to state 117


State 139

   69 expr: expr LE . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 164
    idexpr  go to state 117


State 140

   68 expr: expr GT . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 165
    idexpr  go to state 117


State 141

   70 expr: expr GE . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 166
    idexpr  go to state 117


State 142

   66 expr: expr EQ . expr
   75     | expr EQ . NULLV

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115
    NULLV     shift, and go to state 167

    field   go to state 91
    expr    go to state 168
    idexpr  go to state 117


State 143

   71 expr: expr NE . expr
   76     | expr NE . NULLV

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115
    NULLV     shift, and go to state 169

    field   go to state 91
    expr    go to state 170
    idexpr  go to state 117


State 144

   72 expr: expr AND . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 171
    idexpr  go to state 117


State 145

   73 expr: expr OR . expr

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    field   go to state 91
    expr    go to state 172
    idexpr  go to state 117


State 146

   51 stmt: IF '(' expr ')' . THEN slist ENDIF ';'
   52     | IF '(' expr ')' . THEN slist ELSE slist ENDIF ';'

    THEN  shift, and go to state 173


State 147

   53 stmt: WHILE '(' expr ')' . DO slist ENDWHILE ';'

    DO  shift, and go to state 174


State 148

   80 idexpr: ID '[' expr ']' .

    $default  reduce using rule 80 (idexpr)


State 149

   84 ExprList: expr ',' . ExprList

    NOT       shift, and go to state 113
    ID        shift, and go to state 83
    NUM       shift, and go to state 114
    BOOLCONS  shift, and go to state 115

    $default  reduce using rule 86 (ExprList)

    field     go to state 91
    expr      go to state 120
    idexpr    go to state 117
    ExprList  go to state 175


State 150

   82 idexpr: ID '(' ExprList ')' .

    $default  reduce using rule 82 (idexpr)


State 151

   49 stmt: READ '(' idexpr ')' . ';'

    ';'  shift, and go to state 176


State 152

   50 stmt: WRITE '(' expr ')' . ';'

    ';'  shift, and go to state 177


State 153

   56 stmt: FREE '(' idexpr ')' . ';'

    ';'  shift, and go to state 178


State 154

   87 RetStmt: RET expr ';' .

    $default  reduce using rule 87 (RetStmt)


State 155

   54 stmt: idexpr ASGN ALLOC '(' . ')' ';'

    ')'  shift, and go to state 179


State 156

   55 stmt: idexpr ASGN NULLV ';' .

    $default  reduce using rule 55 (stmt)


State 157

   48 stmt: idexpr ASGN expr ';' .

    $default  reduce using rule 48 (stmt)


State 158

   61 expr: expr . PLUS expr
   61     | expr PLUS expr .
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 61 (expr)


State 159

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   62     | expr MINUS expr .
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 62 (expr)


State 160

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   63     | expr MUL expr .
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    $default  reduce using rule 63 (expr)


State 161

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   64     | expr DIV expr .
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    $default  reduce using rule 64 (expr)


State 162

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   65     | expr MODULO expr .
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    $default  reduce using rule 65 (expr)


State 163

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   67     | expr LT expr .
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 67 (expr)


State 164

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   69     | expr LE expr .
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 69 (expr)


State 165

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   68     | expr GT expr .
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 68 (expr)


State 166

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   70     | expr GE expr .
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 70 (expr)


State 167

   75 expr: expr EQ NULLV .

    $default  reduce using rule 75 (expr)


State 168

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   66     | expr EQ expr .
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 66 (expr)


State 169

   76 expr: expr NE NULLV .

    $default  reduce using rule 76 (expr)


State 170

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   71     | expr NE expr .
   72     | expr . AND expr
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137

    $default  reduce using rule 71 (expr)


State 171

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   72     | expr AND expr .
   73     | expr . OR expr
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143

    $default  reduce using rule 72 (expr)


State 172

   61 expr: expr . PLUS expr
   62     | expr . MINUS expr
   63     | expr . MUL expr
   64     | expr . DIV expr
   65     | expr . MODULO expr
   66     | expr . EQ expr
   67     | expr . LT expr
   68     | expr . GT expr
   69     | expr . LE expr
   70     | expr . GE expr
   71     | expr . NE expr
   72     | expr . AND expr
   73     | expr . OR expr
   73     | expr OR expr .
   75     | expr . EQ NULLV
   76     | expr . NE NULLV

    PLUS    shift, and go to state 133
    MINUS   shift, and go to state 134
    MUL     shift, and go to state 135
    DIV     shift, and go to state 136
    MODULO  shift, and go to state 137
    LT      shift, and go to state 138
    LE      shift, and go to state 139
    GT      shift, and go to state 140
    GE      shift, and go to state 141
    EQ      shift, and go to state 142
    NE      shift, and go to state 143

    $default  reduce using rule 73 (expr)


State 173

   51 stmt: IF '(' expr ')' THEN . slist ENDIF ';'
   52     | IF '(' expr ')' THEN . slist ELSE slist ENDIF ';'

    IF        shift, and go to state 81
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    slist   go to state 180
    stmt    go to state 90
    field   go to state 91
    idexpr  go to state 92


State 174

   53 stmt: WHILE '(' expr ')' DO . slist ENDWHILE ';'

    IF        shift, and go to state 81
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    slist   go to state 181
    stmt    go to state 90
    field   go to state 91
    idexpr  go to state 92


State 175

   84 ExprList: expr ',' ExprList .

    $default  reduce using rule 84 (ExprList)


State 176

   49 stmt: READ '(' idexpr ')' ';' .

    $default  reduce using rule 49 (stmt)


State 177

   50 stmt: WRITE '(' expr ')' ';' .

    $default  reduce using rule 50 (stmt)


State 178

   56 stmt: FREE '(' idexpr ')' ';' .

    $default  reduce using rule 56 (stmt)


State 179

   54 stmt: idexpr ASGN ALLOC '(' ')' . ';'

    ';'  shift, and go to state 182


State 180

   46 slist: slist . stmt
   51 stmt: IF '(' expr ')' THEN slist . ENDIF ';'
   52     | IF '(' expr ')' THEN slist . ELSE slist ENDIF ';'

    IF        shift, and go to state 81
    ELSE      shift, and go to state 183
    ENDIF     shift, and go to state 184
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    stmt    go to state 108
    field   go to state 91
    idexpr  go to state 92


State 181

   46 slist: slist . stmt
   53 stmt: WHILE '(' expr ')' DO slist . ENDWHILE ';'

    IF        shift, and go to state 81
    WHILE     shift, and go to state 82
    ENDWHILE  shift, and go to state 185
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    stmt    go to state 108
    field   go to state 91
    idexpr  go to state 92


State 182

   54 stmt: idexpr ASGN ALLOC '(' ')' ';' .

    $default  reduce using rule 54 (stmt)


State 183

   52 stmt: IF '(' expr ')' THEN slist ELSE . slist ENDIF ';'

    IF        shift, and go to state 81
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    slist   go to state 186
    stmt    go to state 90
    field   go to state 91
    idexpr  go to state 92


State 184

   51 stmt: IF '(' expr ')' THEN slist ENDIF . ';'

    ';'  shift, and go to state 187


State 185

   53 stmt: WHILE '(' expr ')' DO slist ENDWHILE . ';'

    ';'  shift, and go to state 188


State 186

   46 slist: slist . stmt
   52 stmt: IF '(' expr ')' THEN slist ELSE slist . ENDIF ';'

    IF        shift, and go to state 81
    ENDIF     shift, and go to state 189
    WHILE     shift, and go to state 82
    ID        shift, and go to state 83
    READ      shift, and go to state 84
    WRITE     shift, and go to state 85
    FREE      shift, and go to state 86
    BREAK     shift, and go to state 87
    CONTINUE  shift, and go to state 88

    stmt    go to state 108
    field   go to state 91
    idexpr  go to state 92


State 187

   51 stmt: IF '(' expr ')' THEN slist ENDIF ';' .

    $default  reduce using rule 51 (stmt)


State 188

   53 stmt: WHILE '(' expr ')' DO slist ENDWHILE ';' .

    $default  reduce using rule 53 (stmt)


State 189

   52 stmt: IF '(' expr ')' THEN slist ELSE slist ENDIF . ';'

    ';'  shift, and go to state 190


State 190

   52 stmt: IF '(' expr ')' THEN slist ELSE slist ENDIF ';' .

    $default  reduce using rule 52 (stmt)
